// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A recipe suggestion AI agent.
 *
 * - suggestRecipes - A function that handles the recipe suggestion process.
 * - SuggestRecipesInput - The input type for the suggestRecipes function.
 * - SuggestRecipesOutput - The return type for the suggestRecipes function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestRecipesInputSchema = z.object({
  dietaryPreferences: z
    .string()
    .describe(
      'A comma separated list of dietary preferences the user has.  For example:  vegetarian, gluten-free, low-carb.'
    ),
  cuisinePreferences: z
    .string()
    .describe(
      'A comma separated list of cuisines the user prefers. For example: Italian, Mexican, Thai.'
    ),
  ingredientsOnHand: z
    .string()
    .describe(
      'A comma separated list of ingredients the user has on hand. For example: chicken, rice, beans.'
    ),
});
export type SuggestRecipesInput = z.infer<typeof SuggestRecipesInputSchema>;

const SuggestRecipesOutputSchema = z.object({
  recipes: z.array(
    z.object({
      name: z.string().describe('The name of the recipe.'),
      ingredients: z.array(z.string()).describe('A list of ingredients for the recipe.'),
      instructions: z.string().describe('The instructions for the recipe.'),
      cuisine: z.string().describe('The cuisine of the recipe.'),
      dietaryRestrictions: z
        .array(z.string())
        .describe('A list of dietary restrictions the recipe satisfies.'),
    })
  ).describe('A list of recipes that match the user preferences.'),
});
export type SuggestRecipesOutput = z.infer<typeof SuggestRecipesOutputSchema>;

export async function suggestRecipes(input: SuggestRecipesInput): Promise<SuggestRecipesOutput> {
  return suggestRecipesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestRecipesPrompt',
  input: {schema: SuggestRecipesInputSchema},
  output: {schema: SuggestRecipesOutputSchema},
  prompt: `You are a personal recipe assistant. You will suggest recipes based on the user's dietary preferences, cuisine preferences, and ingredients on hand.

Dietary Preferences: {{{dietaryPreferences}}}
Cuisine Preferences: {{{cuisinePreferences}}}
Ingredients on Hand: {{{ingredientsOnHand}}}

Suggest 3 recipes that match the user's preferences.`,
});

const suggestRecipesFlow = ai.defineFlow(
  {
    name: 'suggestRecipesFlow',
    inputSchema: SuggestRecipesInputSchema,
    outputSchema: SuggestRecipesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
